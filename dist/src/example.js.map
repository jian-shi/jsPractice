{"version":3,"sources":["../../src/example.js"],"names":["numbers","result","Math","min","console","log"],"mappings":";;AAAA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAd;AACA,IAAIC,SAASC,KAAKC,GAAL,aAAYH,OAAZ,CAAb,C,CAAmC;AACnCI,QAAQC,GAAR,CAAYJ,MAAZ","file":"example.js","sourcesContent":["/**\n * Created by jshi on 28/04/17.\n */\n// var fs = require ('fs')\n// var output = fs.readFileSync ('src/data.txt', 'utf8')\n//     .trim()\n//     .split('\\n')\n//     .map(e=>e.split(','))\n//     .reduce((customers, line)=>{\n//         customers[line[0]] = customers[line[0]]||[];\n//         customers[line[0]].push({\n//             item: line[1],\n//             price: line[2],\n//             quantity: line[3]\n//         })\n//         return customers;\n//     },{})\n// console.log('output',JSON.stringify(output, null, 2));\n\n\n// const dragonEvents = [\n//     {type: 'attack', value: 12, target: 'player-1'},\n//     {type: 'attack', value: 13, target: 'player-1'},\n//     {type: 'eat', target: 'horse'},\n//     {type: 'attack', value: 22, target: 'player-2'},\n// ]\n//\n// const totalDamageOnPlayer1 = dragonEvents\n//     .filter(({type})=>type==='attack')\n//     .filter(({target})=>target==='player-1')\n//     .map(({value})=>value)\n//     .reduce((p,c)=> p + c ,0)\n//\n//\n// console.log(totalDamageOnPlayer1);\n\n//\n// let dog ={\n//     sound: 'woof',\n//     talk:function(){\n//         console.log(this.sound)\n//     }\n// }\n//\n// let talkFunction = dog.talk;\n// let boundFunction = talkFunction.bind(dog);\n// boundFunction()\n\n\n// // *** Bind and This ***\n// let talk = function talk() {\n//     console.log(this.sound)\n// };\n//\n// let robot = {\n//     talk:  talk,\n//     sound: 'One does not simple walk into mordor'\n// }\n//\n// robot.talk()\n\n// function talk() {\n//     console.log(this.sound);\n// }\n//\n// let animal = {\n//     talk\n// }\n//\n// let cat = {\n//     sound: 'meow'\n// }\n//\n// let dog = {\n//     sound:'woof'\n// }\n//\n// let prarieDog = {\n//     howl(){console.log(this.sound.toUpperCase())}\n// }\n//\n// Object.setPrototypeOf(cat, animal);\n// Object.setPrototypeOf(dog, animal);\n// Object.setPrototypeOf(prarieDog, dog);\n//\n// cat.talk();\n// dog.talk();\n// prarieDog.howl();\n//\n// (function() {\n//     console.log(1);\n//     setTimeout(function(){console.log(2)}, 1000);\n//     setTimeout(function(){console.log(3)}, 0);\n//     console.log(4);\n// })();\n\n// console.log(1 +  \"2\" + \"2\");\n// console.log(1 +  +\"2\" + \"2\");\n// console.log(1 +  -\"1\" + \"2\");\n// console.log(+\"1\" +  \"1\" + \"2\");\n// console.log( \"A\" - \"B\" + \"2\");\n// console.log( \"A\" - \"B\" + 2);\n\n// for (var i = 0; i < 5; i++) {\n//     setTimeout(function() { console.log(i); }, i * 1000 );\n// }\n\n// function indexOf(arr, item) {\n//     var index = arr.indexOf(item);\n//     console.log(index);\n// }\n//\n// indexOf([ 1, 2, 3, 4 ], 3)\n\n// function sum(arr) {\n//     var total = (arr.reduce((a,b)=>a+b,0));\n//     return total;\n// }\n//\n// console.log(sum([1,2,3,4]));\n\n// 移除数组 arr 中的所有值与 item 相等的元素。不要直接修改数组 arr，结果返回新的数组\n// 输入例子:\n//     remove([1, 2, 3, 4, 2], 2)\n//\n// 输出例子:\n//     [1, 3, 4]\n// function remove(arr, item) {\n//     function isItem(value) {\n//         return value !== item;\n//     }\n//     var filtered = arr.filter(isItem);\n//     return filtered;\n// }\n//\n// console.log(remove([1, 2, 3, 4, 2], 2));\n\n// 移除数组 arr 中的所有值与 item 相等的元素，直接在给定的 arr 数组上进行操作，并将结果返回\n// 输入例子:\n//     removeWithoutCopy([1, 2, 2, 3, 4, 2, 2], 2)\n//\n// 输出例子:\n//     [1, 3, 4]\n\n// function removeWithoutCopy(arr, item) {\n//     arr.forEach(\n//         function () {\n//             var indexOf = arr.indexOf(item);\n//             arr.splice(indexOf,1);\n//         }\n//     );\n//     return arr;\n// }\n//\n// console.log(removeWithoutCopy([1,\n// 2, 2, 3, 4, 2, 2], 2));\n\n// 在数组 arr 末尾添加元素 item。不要直接修改数组 arr，结果返回新的数组\n// 输入例子:\n//     append([1, 2, 3, 4],  10)\n//\n// 输出例子:\n//     [1, 2, 3, 4, 10]\n// function append(arr, item) {\n//     newArray = arr.concat(item);\n//     return newArray;\n// }\n//\n// console.log(append([1, 2, 3, 4],10));\n\n// function truncate(arr) {\n//     function isLast(value){\n//         console.log(arr.indexOf(value) + 1 != arr.length);\n//         return arr.indexOf(value) + 1 != arr.length;\n//     }\n//     var newArr =arr.filter(isLast);\n//     return newArr;\n// }\n// console.log(truncate([1, 2, 3, 4]));\n\n// 在数组 arr 开头添加元素 item。不要直接修改数组 arr，结果返回新的数组\n// 输入例子:\n//     prepend([1, 2, 3, 4], 10)\n//\n// 输出例子:\n//     [10, 1, 2, 3, 4]\n\n// function prepend(arr, item) {\n//     return [item].concat(arr);\n// }\n//\n// console.log(prepend([1, 2, 3, 4], 10));\n\n// function curtail(arr) {\n//     function isFirst(v) {\n//         return arr.indexOf(v) != 0\n//     }\n//\n//     var newArr = arr.filter(isFirst);\n//     return newArr;\n// }\n// console.log(curtail([1, 2, 3, 4]));\n\n// function concat(arr1, arr2) {\n//     var list = arr1.concat(arr2);\n//     return list;\n// }\n\n// 题目描述\n// 在数组 arr 的 index 处添加元素 item。不要直接修改数组 arr，结果返回新的数组\n// 输入例子:\n//     insert([1, 2, 3, 4], 'z', 2)\n//\n// 输出例子:\n//     [1, 2, 'z', 3, 4]\n// function insert(arr, item, index) {\n//      var list = arr.concat([]);\n//      list.splice(index,0,item);\n//      return list;\n// }\n//\n// console.log(insert([1, 2, 3, 4], 'z', 2));\n\n\n// 统计数组 arr 中值等于 item 的元素出现的次数\n// 输入例子:\n//     count([1, 2, 4, 4, 3, 4, 3], 4)\n//\n// 输出例子:\n//     3\n// function count(arr, item) {\n//     var count = arr.reduce(\n//         function (total, x) {\n//             return x===item? total+1:total\n//         }, 0\n//     )\n//\n//     return count;\n// }\n// console.log(count([1, 2, 4, 4, 3, 4, 3], 4));\n\n// 题目描述\n// 找出数组 arr 中重复出现过的元素\n// 输入例子:\n//     duplicates([1, 2, 4, 4, 3, 3, 1, 5, 3]).sort()\n//\n// 输出例子:\n//     [1, 3, 4]\n// function duplicates(arr) {\n//     var list = [];\n//     var newarr = [];\n//     function createList (element, index){\n//         list[element] = list[element]||[];\n//         list[element].push(element);\n//     }\n//     function addToNewArr(element, index) {\n//         if (element.length >1){\n//             newarr.push(element[0]);\n//         }\n//     }\n//     arr.forEach(createList);\n//     list.forEach(addToNewArr);\n//\n//     return newarr;\n// }\n//\n// console.log(duplicates([1,1,2,2,3,3,4,4,4,4,4,4,5,6,7,8,8]));\n\n//为数组 arr 中的每个元素求二次方。不要直接修改数组 arr，结果返回新的数组\n\n// function square(arr) {\n//\n//     var result = arr.map(\n//         function (x) {\n//             return Math.pow(x,2);\n//         }\n//     );\n//     return result;\n// }\n//\n// console.log(square([1, 2, 3, 4]));\n\n// function Foo() {\n//     var i = 0;\n//     return function() {\n//         console.log(i++);\n//     }\n// }\n//\n// var f1 = Foo(),\n//     f2 = Foo();\n// f1(); //0\n// f1(); //1\n// f2(); //0\n\n// var bb = 1;\n// function aa(bb) {\n//     bb = 2;\n//     console.log(bb);\n// }\n// aa(bb);\n// console.log(bb);\n\n// var numbers = [111, 21, 13, 41];\n// var number1 = Math.max(...numbers) // 4\n// var number2 = Math.min(...numbers) // 1\n//\n// console.log(number1, number2);\n\n// var count = (function(){\n//     var _counter=0;\n//     return function () {\n//         return _counter +=1;\n//     }\n// })();\n//\n// console.log(count());\n\n\n// 在数组 arr 中，查找值与 item 相等的元素出现的所有位置\n// 输入例子:\n//     findAllOccurrences('abcdefabc'.split(''), 'a').sort()\n//\n// 输出例子:\n//     [0, 6]\n// function findAllOccurrences(arr, target) {\n//     var list = [];\n//     function isMatch(value, index) {\n//         value !== target || list.push(index);\n//     }\n//     arr.forEach(isMatch);\n//     return list;\n// }\n//\n// console.log(findAllOccurrences('abcdefabc'.split(''), 'a'))\n\n// function globals() {\n//     var myObject = {\n//         name : 'Jory'\n//     };\n//\n//     return myObject;\n// }\n//\n// console.log(globals());\n\n// function parse2Int(num) {\n//     return parseInt(num, 10);\n// }\n//\n// console.log(parse2Int('12'),parse2Int('12px'),parse2Int('0x12'));\n\n// 实现一个打点计时器，要求\n// 1、从 start 到 end（包含 start 和 end），每隔 100 毫秒 console.log 一个数字，每次数字增幅为 1\n// 2、返回的对象中需要包含一个 cancel 方法，用于停止定时操作\n// 3、第一个数需要立即输出\n// function count(start, end) {\n//     console.log(start++);\n//\n//         var myVar = setInterval(\n//             function () {\n//                 if(start<=end){\n//                     myTimer();\n//                 }\n//                 else{\n//                     clearInterval(myVar)\n//                 }\n//\n//             },1000\n//         );\n//\n//\n//     function myTimer() {\n//         console.log(start++);\n//     }\n//\n//     return {\n//         cancel:function(){\n//             clearInterval(myVar);\n//         }\n//     };\n//\n// }\n//\n// count(1,10);\n\n// function fizzBuzz(num) {\n//     switch (true){\n//         case num == null || isNaN(num):\n//             return false;\n//             break;\n//         case num%3==0&&num%5==0:\n//             return \"fizzbuzz\";\n//             break;\n//         case num%3==0 :\n//             return \"fizz\";\n//             break;\n//         case num%5==0:\n//             return \"buzz\";\n//             break;\n//         default:\n//             return num;\n//\n\n\n//     }\n// }\n//\n// console.log(fizzBuzz(15));\n\n// var items = [1,2,3,4];\n// function printItems(a,b,c) {\n//     console.log(a, b,c);\n// }\n// printItems(...items);\n//\n// var num = [1,23,343];\n// var numPlusTen=num.map(\n//     (n)=>n+10\n// )\n// console.log(numPlusTen)\n\n// class Dog{\n//     constructor(){\n//         //this.bark=this.bark.bind(this);\n//     }\n//     bark(){\n//         console.log(\"Hello\");\n//     }\n// }\n//\n// var dog = new Dog();\n\n//dog.print();\n\n// var Button = function(content) {\n//     this.content = content;\n// };\n// Button.prototype.click = function() {\n//     console.log(this.content + ' clicked');\n// }\n//\n// var myButton = new Button('OK');\n// myButton.click();\n//\n// var looseClick = myButton.click;\n// looseClick(); // not bound, 'this' is not myButton - it is the global object\n//\n// var boundClick = myButton.click.bind(myButton);\n// boundClick(); // bound, 'this' is myButton\n\n//use reduce to count items in an array\n// var votes = [\n//     'tacos',\n//     'pizza',\n//     'pizza',\n//     'tacos',\n//     'fries',\n//     'ice cream',\n//     'ice cream',\n//     'pizza'\n// ]\n//\n// var reducer = function(items, vote) {\n//     items[vote]?items[vote] += 1:items[vote] = 1; //if param vote exist then vote value +1, else create vote and set it equals to 1\n//     return items;\n// }\n// var result = votes.reduce(reducer, {}) // {tacos: 2, pizza: 3, fries: 1, ice cream: 2}\n// console.log(result);\n//\n//     let dog = ()=>{\n//         const sound = \"woof\"\n//         return{\n//             talk:()=>console.log(sound)\n//         }\n//     }\n//\n//     var sniffles = dog()\n//     sniffles.talk()\n\n// function isPrime(n)\n// {\n//     var divisor = 3,\n//         limit = Math.sqrt(n);\n//\n//     //check simple cases\n//     if (n == 2 || n == 3)\n//         return true;\n//     if (n % 2 == 0)\n//         return false;\n//\n//     while (divisor <= limit)\n//     {\n//         if (n % divisor == 0)\n//             return false;\n//         else\n//             divisor += 2;\n//     }\n//     return true;\n// }\n//\n// console.log(isPrime(3));\n\n// function twoSum(nums, target) {\n//     let twoSumIndex = [];\n//     nums.forEach(\n//         (num) => {if (nums.indexOf(target-num) !== -1 && twoSumIndex.length === 0){\n//             twoSumIndex.push(nums.indexOf(num));\n//             twoSumIndex.push(nums.indexOf(target-num));\n//         }}\n//     )\n//     return twoSumIndex;\n// };\n//\n// console.log(twoSum([3,2,4],6))\n\n// // Spread operator 把array分裂为独立元素\n// var parts = ['shoulders', 'knees'];\n// var lyrics1 = ['head', parts, 'and', 'toes'];\n// var lyrics2 = ['head', ... parts, 'and', 'toes'];\n//\n// console.log(lyrics1) // [ 'head', [ 'shoulders', 'knees' ], 'and', 'toes' ]\n// console.log(lyrics2) // [ 'head', 'shoulders', 'knees', 'and', 'toes' ]\n\n// var person1 = {name: 'Marvin', age: 42, size: '2xM'};\n// var person2 = {name: 'Zaphod', age: 42000000000, size: '1xS'};\n//\n// var say = function(greeting){\n//     console.log(greeting + \" \" + this.name);\n// };\n//\n//\n// say.apply(person1, ['Hello']); //call and apply both take obj as argument, apply takes array as argument\n// say.call(person2, 'Hello'); //cal takes individual arguments\n//\n// var arr = [1,2,3];\n// var arr2 = [...arr]; // like arr.slice()\n// arr2.push(4)\n// console.log(arr,arr2)\n\nlet numbers = [9, 4, 7, 1];\nlet result = Math.min(...numbers); // 1\nconsole.log(result);\n"]}